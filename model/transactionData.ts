/**
 * CityPay POS API
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


export interface TransactionData {
    /**
     * additional data provided within the acquirer response
     */
    additionalData?: string;
    /**
     * Value provided by online processing
     */
    auxiliaryData?: string;
    /**
     * The type of card used such as EMV
     */
    cardType?: string;
    /**
     * The date and time that the transaction was completed in ISO-8166 format
     */
    completedAt?: string;
    /**
     * The date and time that the transaction was created in ISO-8166 format
     */
    createdAt?: string;
    /**
     * The currency symbol used
     */
    currencySymbol?: string;
    /**
     * Boolean value should the transaction be declined by the card
     */
    declinedByCard?: boolean;
    /**
     * Cryptogram used by the card in processing
     */
    emvAppCryptogram?: string;
    /**
     * Expiry date of the card
     */
    emvAppExpirationDate?: string;
    /**
     * A transaction counter, incremented by the device resulting in a transaction number
     */
    emvAppTxnCounter?: number;
    /**
     * The amount authorised
     */
    emvAuthorizedAmount?: string;
    /**
     * Verification results within the processing scope
     */
    emvCardholderVerificationResults?: string;
    /**
     * A country code returned by the device
     */
    emvCountryCode?: string;
    /**
     * Cryptogram info returned by the card
     */
    emvCryptogramInfoData?: string;
    /**
     * The application id (AID) identifying the card used
     */
    emvIccAppid?: string;
    /**
     * The interchange profile used
     */
    emvInterchangeProfile?: string;
    /**
     * Application data provided by the issuer
     */
    emvIssuerAppData?: string;
    /**
     * Sequence number provided by the card
     */
    emvPanSeqNum?: string;
    /**
     * Terminal capabilities of the device
     */
    emvTerminalCapabilities?: string;
    /**
     * The terminal type of the device
     */
    emvTerminalType?: string;
    /**
     * TVR provided by the verification process of the transaction
     */
    emvTerminalVerificationResults?: string;
    /**
     * A masked version of the card number
     */
    emvTrack2Equivalent?: string;
    /**
     * ISO currency code of the transaction
     */
    emvTxnCurrencyCode?: string;
    /**
     * ISO date of the transaction
     */
    emvTxnDate?: string;
    /**
     * Status info of the transaction
     */
    emvTxnStatusInfo?: string;
    /**
     * Transacrtion type information returned
     */
    emvTxnType?: string;
    /**
     * The UN or unpredicatble number in the transaction process
     */
    emvTxnUnpredictableNumber?: string;
    /**
     * Determines if the card was a commercial card
     */
    isCommercialCard?: string;
    /**
     * Determines if the card was contactless
     */
    isContactless?: string;
    /**
     * Determines if fallback was used
     */
    isFallback?: string;
    /**
     * Determines if the transaction was authorised offline
     */
    isOffline?: string;
    /**
     * Determines if the transaction was voided
     */
    isVoided?: string;
    /**
     * A response code provided by the acquirer
     */
    responseCode?: string;
    /**
     * The response text returned by the acquirer
     */
    responseText?: string;
    /**
     * A text result of the transaction
     */
    result?: string;
    /**
     * A description of the card scheme for the card
     */
    scheme?: string;
    /**
     * Determines whether a signature was required for legacy systems
     */
    signatureRequired?: string;
    /**
     * The terminal id used from the device
     */
    terminalId?: string;
    /**
     * The total amount processed
     */
    totalAmount?: number;
    /**
     * The type of transaction processed
     */
    transactionType?: string;
    /**
     * Determines if the transaction was verified by pin entry
     */
    verifiedByPin?: boolean;
}
